{"version":3,"file":"static/js/417.04ff0c42.chunk.js","mappings":"+QAEaA,EAAOC,EAAAA,GAAAA,GAAH,8XAmBJC,EAAWD,EAAAA,GAAAA,EAAH,wFAMRE,EAAOF,EAAAA,GAAAA,EAAH,2LAUJG,EAAOH,EAAAA,GAAAA,KAAH,iEAIJI,EAAOJ,EAAAA,GAAAA,GAAH,6FAKJK,EAAML,EAAAA,GAAAA,IAAH,+C,SCYhB,EApDa,WACX,OAAkCM,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAgBR,IAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEKC,EAAAA,EAAAA,IAAeJ,GAFpB,OAEbF,EAFa,OAGnBC,EAAaD,EAAUO,MACvBC,OAAOC,SAAS,EAAG,KAJA,gDAMnBC,QAAQC,IAAR,MANmB,yDAAH,qDAUpBN,GACD,GAAE,CAACH,IAECF,EAIL,OACE,UAACY,EAAA,EAAD,CAAKC,QAAQ,OAAb,WACE,SAACnB,EAAD,oBACA,SAACF,EAAD,UACIQ,GAAkC,IAArBA,EAAUc,OAGvBd,EAAUe,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACtCC,EAAW,0CAAsCF,GAEvD,OACE,UAACrB,EAAD,WACGuB,GACC,SAACtB,EAAD,CAAKuB,IAAKD,EAAaE,IAAKL,EAAMM,MAAM,MAAMC,OAAO,SAErD,SAAC7B,EAAD,wBAEF,SAACA,EAAD,UAAOsB,KACP,UAACtB,EAAD,0BACa,SAACC,EAAD,UAAOuB,SARXH,EAYd,KAlBD,SAACrB,EAAD,4BAuBT,C,4MCtDc8B,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,4LAGyBC,EAAAA,EAAAA,IAHzB,wGAGQC,EAHR,yBAISA,EAASC,MAJlB,kEAOA,IAAMC,EAAiB,mCAAG,WAAM3B,GAAN,uFACDwB,EAAAA,EAAAA,IAAA,6CACiBxB,EADjB,6DADC,cAClByB,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOjBtB,EAAc,mCAAG,WAAMJ,GAAN,uFACEwB,EAAAA,EAAAA,IAAA,6CACiBxB,EADjB,qEADF,cACfyB,EADe,yBAIdA,EAASC,MAJK,2CAAH,sDAOdE,EAAiB,mCAAG,WAAM5B,GAAN,uFACDwB,EAAAA,EAAAA,IAAA,6CACiBxB,EADjB,4EADC,cAClByB,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOjBG,EAAgB,mCAAG,WAAMC,GAAN,uFACAN,EAAAA,EAAAA,IAAA,yHAC6FM,IAF7F,cACjBL,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/MoviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-top: 20px;\n  padding-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1 1 1;\n  justify-content: center;\n  gap: 35px;\n  list-style-type: none;\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n    align-items: center;\n  }\n  @media screen and (min-width: 768px) {\n    flex-wrap: wrap;\n    flex: 1 1 1;\n  }\n`;\n\nexport const Subtitle = styled.p`\n  text-align: center;\n  font-weight: 700;\n  font-size: 36px;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  font-weight: 700;\n  font-size: 16px;\n  max-width: 200px;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding: 10px;\n`;\nexport const Span = styled.span`\n  font-weight: 500;\n  font-size: 16px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const Img = styled.img`\n  border-radius: 5px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from 'services/MoviesApi';\nimport Box from '../Box';\nimport { List, Item, Img, Text, Span, Subtitle } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const getFetchMovies = async () => {\n      try {\n        const movieCast = await fetchMovieCast(id);\n        setMovieCast(movieCast.cast);\n        window.scrollBy(0, 400);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    getFetchMovies();\n  }, [id]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <Box padding=\"20px\">\n      <Subtitle>Cast</Subtitle>\n      <List>\n        {!movieCast || movieCast.length === 0 ? (\n          <Text>Not found</Text>\n        ) : (\n          movieCast.map(({ cast_id, name, profile_path, character }) => {\n            const profilePath = `https://image.tmdb.org/t/p/w500/${profile_path}`;\n\n            return (\n              <Item key={cast_id}>\n                {profilePath ? (\n                  <Img src={profilePath} alt={name} width=\"200\" height=\"300\" />\n                ) : (\n                  <Text>No Photo</Text>\n                )}\n                <Text>{name}</Text>\n                <Text>\n                  Character: <Span>{character}</Span>\n                </Text>\n              </Item>\n            );\n          })\n        )}\n      </List>\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nasync function fetchMovies() {\n  const url = `https://api.themoviedb.org/3/trending/all/day?api_key=b1c3a2089fd706f08956c6d7f55cc574`;\n\n  const response = await axios.get(url);\n  return response.data;\n}\n\nconst fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=b1c3a2089fd706f08956c6d7f55cc574&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchMovieCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=b1c3a2089fd706f08956c6d7f55cc574&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=b1c3a2089fd706f08956c6d7f55cc574&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nconst fetchSearchMovie = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=b1c3a2089fd706f08956c6d7f55cc574&language=en-US&page=1&query=${query}`\n  );\n  return response.data;\n};\n\nexport {\n  fetchMovies,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n  fetchSearchMovie,\n};\n"],"names":["List","styled","Subtitle","Text","Span","Item","Img","useState","movieCast","setMovieCast","id","useParams","useEffect","getFetchMovies","fetchMovieCast","cast","window","scrollBy","console","log","Box","padding","length","map","cast_id","name","profile_path","character","profilePath","src","alt","width","height","fetchMovies","axios","response","data","fetchMovieDetails","fetchMovieReviews","fetchSearchMovie","query"],"sourceRoot":""}